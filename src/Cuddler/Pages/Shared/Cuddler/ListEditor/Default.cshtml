@using global::Cuddler.Pages.Shared.Cuddler.CuddlerEncode
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerFormFields
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerHashEscape
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerPopupForm
@using global::Cuddler.Utils
@using global::Cuddler.Web.Helpers
@using Kendo.Mvc.UI
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ListEditorTagHelper
@{
    var templateId = WebIdUtil.GetWebId();
    var listViewId = WebIdUtil.GetWebId();
    var closeEventName = WebIdUtil.GetWebId();
    var emptyResultsId = WebIdUtil.GetWebId();
    var allowCreate = Model.CreateModel != null;
    var allowUpdate = Model.UpdateModel != null;
}
<div class="eux-ListEditor">
@if (Model.ActionComplete == EListEditorActionComplete.Reload)
{
    <script>
        $(function() {
            $(document).on("@closeEventName",
                function() {
                    const list = $("#@listViewId").data("kendoListView");
                    list.dataSource.read();
                });
        });
    </script>
}
<div class="d-flex eux-cuddlerlist-heading mb-2">
    <h5 class="mb-0 me-2">
        @Model.PluralText
    </h5>
    @if (!Model.ReadOnly && allowCreate)
    {
        var addButtonText = $"Add {(string?)Model.SingleText}";
        if (Model.CreateModel == null)
        {
            throw new InvalidOperationException("CuddlerList requires a CreateModel if the CreateApiUrl is set");
        }

        var inputProperties = Model.CreateModel;
        EActionComplete action;
        switch (Model.ActionComplete)
        {

            case EListEditorActionComplete.Reload:
                action = EActionComplete.Reload;
                break;
            case EListEditorActionComplete.Details:
                action = EActionComplete.Details;
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        <cuddler-popup-form action-complete="@action"
                            button-icon="Plus"
                            button-text="@addButtonText"
                            button-type="Icon"
                            close-event-name="@closeEventName"
                            fields="@inputProperties"
                            popup-title="@addButtonText"
                            submit-api-url="@Model.CreateApi"
                            submit-button-text="Save" />
    }
</div>
@if (Model.ShowArchive)
{
    var deletePopupId = WebIdUtil.GetWebId();
    var deletePopupTitle = $"Remove {(string?)Model.SingleText}";
    var deletePopupMessage = $"Are you sure you want to remove this {Model.SingleText.ToLower()}?";
    <script>
        $(function() {

            $("#@(deletePopupId)").on("open",
                function(event, url) {
                    document.querySelectorAll(".c8d32fc7a").forEach(el => el.remove());
                    const popupWindow = $("#@(deletePopupId)");
                    const clonedWindow = popupWindow.clone().addClass('c8d32fc7a');
                    clonedWindow.appendTo("body");
                    clonedWindow.modal('show');
                    clonedWindow.on('hidden.bs.modal', function() { $(document).trigger("@closeEventName"); });
                    $(clonedWindow).find(".deleteButton").on("click", function() { $.post(url, function() {
                        $(clonedWindow).find(".cancel_@closeEventName").click();
                    }); });
                });

            $("#@listViewId").on("click",
                ".customDelete",
                function() {
                    const listview = $("#@listViewId").data("kendoListView");
                    const row = $(this).closest(".k-listview-item").data("uid");
                    const dataItem = listview.dataSource.getByUid(row);
                    $("#@deletePopupId").trigger("open", [`@Model.ArchiveApi?id=${dataItem.Id}`]);
                });
        });
    </script>
    <div aria-hidden="true"
         aria-labelledby="@(deletePopupId)"
         class="eux-modal-background fade modal"
         id="@(deletePopupId)"
         role="dialog"
         style="display: none;"
         tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">
                        @(Html.Raw(deletePopupTitle))
                    </h4>
                    <button aria-label="Close"
                            class="close"
                            data-bs-dismiss="modal"
                            data-dismiss="modal"
                            type="button">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body"
                     id="@(deletePopupId)-pod">
                    <p>
                        @deletePopupMessage
                    </p>
                    <div style="background: var(--ColorFive); height: 2px"></div>
                    <div class="d-flex d-flex-gap-2">
                        <span class="btn btn-danger deleteButton w-100px"
                              type="button">
                            Yes
                        </span>
                        <span class="btn btn-light ml-2 w-100px cancel_@closeEventName"
                              data-bs-dismiss="modal"
                              data-dismiss="modal"
                              type="button">
                            Cancel
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (allowUpdate)
{
    if (Model.UpdateModel == null)
    {
        throw new InvalidOperationException("CuddlerList requires a UpdateModel if the UpdateApiUrl is set");
    }

    var updatePopupId = WebIdUtil.GetWebId();
    var updatePopupTitle = $"Update {(string?)Model.SingleText}";
    var inputProperties = Model.UpdateModel;

    <script>
        $(function() {
            $("#@(updatePopupId)").on("open",
                function(event, url, data) {
                    document.querySelectorAll(".c8d32fc7a").forEach(el => el.remove());
                    const popupWindow = $("#@(updatePopupId)");
                    const clonedWindow = popupWindow.clone().addClass('c8d32fc7a');
                    clonedWindow.appendTo("body");
                    clonedWindow.modal('show');
                    clonedWindow.on('hidden.bs.modal', function() { $(document).trigger("@closeEventName"); });
                    const content = $("<div/>").html($("#@(updatePopupId)_template").html()).text();
                    clonedWindow.find("#@(updatePopupId)-pod").html(content);
                    $(clonedWindow.find("#@(updatePopupId)-pod form")).kendoValidator({
                        rules: {
                            required: function(input) {
                                if (input.filter("[required]").length && $.trim(input.val()) === "") {
                                    return false;
                                }
                                return true;
                            },
                            regex: function(input) {
                                if (input.is("[data-regex-msg]") && input.val() !== "") {
                                    const value = input.val();
                                    const regex = input.attr("data-regex");
                                    const re = new RegExp(regex);
                                    if (re.test(value)) {
                                        return true;
                                    } else {
                                        return false;
                                    }
                                }
                                return true;
                            }
                        },
                        validateOnBlur: false
                    });
                    $(clonedWindow).find(".updateButton").on("click",
                        function() {
                            const button = $(this);
                            button.text("Saving...");
                            button.attr('disabled', 'disabled');
                            button.addClass('eux-disabled');
                            const form = button.closest("form");
                            var serial = form.find(":input").serialize();
                            $.each(form.find('input[type=checkbox]').filter(function() { return $(this).prop('checked') === false; }),
                                function(idx, el) {
                                    const emptyVal = "false";
                                    serial += `&${$(el).attr('name')}=${emptyVal}`;
                                }
                            );
                            const kendoValidator = $(clonedWindow.find("#@(updatePopupId)-pod form")).getKendoValidator();
                            if (kendoValidator === undefined || (kendoValidator != null && kendoValidator.validate())) {
                                $.ajax({
                                    type: "POST",
                                    dataType: "html",
                                    url: url,
                                    data: serial,
                                    success: function() {
                                        $('.cancel_@closeEventName').click();
                                       
                                    }
                                });
                            }
                        });
                    const inputs = $("#@(updatePopupId)-pod form").find(':input');
                    $(inputs).each(function() {
                        const input = $(this);
                        if (input.attr("type") === "checkbox") {
                            const data1 = input.data("value");
                            const template = kendo.template(data1);
                            const result = template(data);
                            input.prop('checked', result === "true");
                        } else if ($(this).data("kendoDropDownList")) {
                            const template = kendo.template(input.val());
                            const result = template(data);
                            const dropdownlist = $(this).data("kendoDropDownList");
                            dropdownlist.value(result);
                        } else {
                            const template = kendo.template(input.val());
                            const result = template(data);
                            input.val(result);
                        }
                    });

                });

            $("#@listViewId").on("click",
                ".customEdit",
                function() {
                    const listview = $("#@listViewId").data("kendoListView");
                    const row = $(this).closest(".k-listview-item").data("uid");
                    const dataItem = listview.dataSource.getByUid(row);
                    $("#@updatePopupId").trigger("open", [`@Model.UpdateApi?id=${dataItem.Id}`, dataItem]);
                });
        });
    </script>

    <cuddler-encode id="@(updatePopupId)_template">
        <form autocomplete="off"
              data-role="validator"
              novalidate="novalidate"
              onsubmit="return false;">
            <cuddler-hash-escape>
                <cuddler-form-fields fields="@inputProperties"
                                     is-template="true" />
            </cuddler-hash-escape>
            <div style="background: var(--ColorFive); height: 2px"></div>
            <div class="d-flex d-flex-gap-2">
                <span class="btn btn-success updateButton w-100px"
                      type="button">
                    Save
                </span>
                <span class="btn btn-light ml-2 w-100px cancel_@closeEventName"
                      data-bs-dismiss="modal"
                      data-dismiss="modal"
                      type="button">
                    Cancel
                </span>
            </div>
        </form>
    </cuddler-encode>

    <div aria-hidden="true"
         aria-labelledby="@(updatePopupId)"
         class="fade modal"
         id="@(updatePopupId)"
         role="dialog"
         style="background: rgba(0, 0, 0, .8); display: none;"
         tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">
                        @(Html.Raw(updatePopupTitle))
                    </h4>
                    <button aria-label="Close"
                            class="close"
                            data-bs-dismiss="modal"
                            data-dismiss="modal"
                            type="button">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body"
                     id="@(updatePopupId)-pod">
                </div>
            </div>
        </div>
    </div>
}
<script id="@templateId"
        type="text/x-kendo-template">
    <div>
        <div>
        @Html.Raw(Model.Html)
        </div>
        <div class="eux-btns">
             @if (allowUpdate && Model.UpdateModel != null)
             {
                 <i class="btn btn-light pointer customEdit mx-1 fas fa-pencil"></i>
             }
             @if (Model.ShowArchive)
             {
                 <i class="btn btn-light pointer customDelete mx-1 fas fa-trash"></i>
             }
        </div>
    @if (Model.AllowSort)
    {
        <div class="eux-sort">
            @if (Model.SortApi != null)
            {
                <i class="fal fa-chevron-square-up"></i>
                <i class="fal fa-chevron-square-down"></i>
            }
                
                
                
                
        </div>    }
    </div>
</script>
<div>
    @(Html.Kendo()
          .ListView<dynamic>()
          .Name(listViewId)
          .TagName("div")
          .ClientTemplateId(templateId)
          .DataSource(ds => ds.Ajax()
                              .AutoSync(true)
                              .ServerOperation(false)
                              .Sort(s => {
                                  if (!string.IsNullOrEmpty(Model.OrderBy))
                                  {
                                      s.Add(Model.OrderBy);
                                  }
                              })
                              .Read(r => r.Url(Model.ReadApi.ToString())
                                          .Type(HttpVerbs.Post))))
</div>
<p class="d-none my-2"
   id="@emptyResultsId">
    @{
        var emptyResultsText = $"No {Model.SingleText.ToLower()} entries have been added.";
    }
    @emptyResultsText
</p>
@if (Model.AllowSort)
{
    <script>
        $("#@listViewId").on("click",
            ".fa-chevron-square-up",
            function() {
                const listview = $("#@listViewId").data("kendoListView");
                const row = $(this).closest(".k-listview-item").data("uid");
                const dataItem = listview.dataSource.getByUid(row);
                $.post("@Model.SortApi",
                    { id: dataItem.Id, newIndex: dataItem.SortOrder - 1 },
                    function() {
                        const list = $("#@listViewId").data("kendoListView");
                        list.dataSource.read();
                    });
            });
        $("#@listViewId").on("click",
            ".fa-chevron-square-down",
            function() {
                const listview = $("#@listViewId").data("kendoListView");
                const row = $(this).closest(".k-listview-item").data("uid");
                const dataItem = listview.dataSource.getByUid(row);
                $.post("@Model.SortApi",
                    { id: dataItem.Id, newIndex: dataItem.SortOrder + 1 },
                    function() {
                        const list = $("#@listViewId").data("kendoListView");
                        list.dataSource.read();
                    });
            });
    </script>
}
</div>