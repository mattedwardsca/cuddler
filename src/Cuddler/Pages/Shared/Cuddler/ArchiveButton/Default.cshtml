@using global::Cuddler.Core.Utils
@using global::Cuddler.Data.Forms
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerPopup
@using global::Cuddler.Pages.Shared.Cuddler.FormField
@using global::Cuddler.Web.Helpers
@model ArchiveButtonTagHelper
@{
    var cssClassBuilder = CssClassBuilder.CreateInstance();

    if (Model.ArchiveUrl == null && Model.RestoreUrl == null)
    {
        throw new InvalidOperationException($"Either {nameof(ArchiveButtonTagHelper)}.{nameof(Model.ArchiveUrl)} or {nameof(ArchiveButtonTagHelper)}.{nameof(Model.RestoreUrl)} is required. Error: c3995fd4-cb79-4600-a0ad-e04de838b1c2");
    }

    if (Model.ButtonType == EArchiveButtonType.ActionMenu)
    {
        cssClassBuilder.AddClass("dropdown-item");
    }

    var model = Model.Data;
    var modelType = string.IsNullOrEmpty(Model.OverrideName)
        ? StringUtil.SplitCamelCase(model.GetType()
                                         .Name.Replace("Entity", string.Empty)
                                         .Replace("Proxy", string.Empty))
        : Model.OverrideName;
    if (!string.IsNullOrEmpty(Model.ArchiveText) || !string.IsNullOrEmpty(Model.ArchiveText)) modelType = null;
    var isArchiveAction = model.DateArchived == null;
    var buttonText = isArchiveAction
        ? $"{Model.ArchiveText ?? "Delete"}  {modelType}"
        : $"{Model.UnarchiveText ?? "Restore"}  {modelType}";

    var isButton = Model.ButtonType == EArchiveButtonType.Button;
    var buttonType = isButton
        ? EButtonType.Warning
        : EButtonType.Link;

    var buttonIcon = isArchiveAction
        ? EFontAwesomeIcon.Archive
        : EFontAwesomeIcon.ArchiveRestore;
    var thisText = modelType == null
        ? string.Empty
        : "this";
    var description = isArchiveAction
        ? $"Please confirm you want to {(Model.ArchiveText ?? "delete").ToLower()} {thisText} {modelType?.ToLower()}"
        : $"Please confirm you want to {(Model.UnarchiveText ?? "restore").ToLower()} {thisText} {modelType?.ToLower()}";
    var apiUrl = isArchiveAction
        ? Model.ArchiveUrl
        : Model.RestoreUrl;

    var submitButtonText = isArchiveAction
        ? $"{Model.ArchiveText ?? "Delete"} {modelType}"
        : $"{Model.UnarchiveText ?? "Restore"} {modelType}";
}
<div class="eux-ArchiveButton @cssClassBuilder">
    <cuddler-popup action-complete="@Model.ActionComplete"
                   button-icon="@buttonIcon"
                   button-text="@buttonText"
                   button-type="@buttonType"
                   redirect-url="@Model.RedirectUrl"
                   submit-api-url="@apiUrl"
                   submit-button-text="@submitButtonText"
                   submit-button-type="Warning">
        @{
            <div class="eux-popup-top-html">
                @Html.Raw(Model.Html)
            </div>
            @if (!Model.HideArchiveReason && isArchiveAction)
            {
                <div>
                    <form-field label="Reason"
                                name="@nameof(Model.Data.ArchiveReason)"
                                template="@(EFormField.Textarea)"
                                value="@(Model.ArchiveReason ?? Model.Data.ArchiveReason)" />
                </div>
            }
            <div>
                @description
            </div>
        }
    </cuddler-popup>
</div>