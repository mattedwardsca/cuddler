@using Microsoft.AspNetCore.Http
@model CuddlerTabsTagHelper

@functions
{
    public static string CombinedPathWithQuery(HttpRequest request)
    {
        return $"{request.PathBase}{request.Path}{request.QueryString}";
    }

    public static string CombinedPath(HttpRequest request)
    {
        return $"{request.PathBase}{request.Path}";
    }
}

<div class="eux-CuddlerTabs">
    <ul class="nav nav-tabs"
        role="tablist">
        @foreach (var tab in Model.TabList)
        {
            <li class="nav-item"
                role="presentation">
                <a aria-controls="@tab.Text"
                   class="nav-link"
                   data-bs-target="#link-@tab.Id"
                   data-bs-toggle="tab"
                   href="@tab.Value"
                   id="@tab.Id"
                   role="tab">
                    @tab.Text
                </a>
            </li>
        }
    </ul>
    <div class="tab-content">
        @foreach (var tab in Model.TabList)
        {
            <div aria-labelledby="link-@tab.Id"
                 class="tab-pane"
                 id="link-@tab.Id"
                 role="tabpanel">
                
                @if (Model.Skeleton)
                {
                    <div class="m-auto p-5">
                        <cuddler-information type="Secondary">
                            @if (!string.IsNullOrEmpty(Model.SkeletonMessage))
                            {
                                @Html.Raw(Model.SkeletonMessage)
                            }
                        </cuddler-information>
                    </div>
                }
            </div>
        }
    </div>
    <script>
    $('[data-bs-toggle="tab"]').on('click',
        function() {
            const $this = $(this);
            const source = $this.attr('href');
            var tabId = $this.attr('id');
            const nextState = $this.html();
            const nextTitle = $this.html();

            @if (Model.TrackHistory)
            {
                <text>
                    const nextUrl = `@Html.Raw(CombinedPathWithQuery(Context.Request))#tab=${tabId}`;
                    window.history.replaceState(nextState, nextTitle, nextUrl);
                    const pageUrl = `@Html.Raw(CombinedPath(Context.Request))`;
                    window.localStorage.setItem(pageUrl, tabId);
                </text>
            }
            $.get(source, function(data) { $(`#link-${tabId}`).html(data); });
            const tab = new bootstrap.Tab($this);
            tab.show();
            return false;
        });

    @if (Model.TrackHistory)
    {
        <text>
            const pageUrl = `@Html.Raw(CombinedPath(Context.Request))`;
            if (window.location.hash) {
                const currentHash = window.location.hash.substr(5);
                window.localStorage.setItem(pageUrl, currentHash);
                $(`[data-bs-target="#link-${currentHash}"]`).click();
            } else {
                const tabTarget = window.localStorage.getItem(pageUrl);
                if (tabTarget !== undefined && tabTarget !== null) {
                    const tab = $(`[data-bs-target="#link-${tabTarget}"]`);
                    if (tab !== undefined) {
                        tab.click();
                    }
                } else {
                    $(`[data-bs-target="#link-${"@Model.TabList.First().Id"}"]`).click();
                }
            }
        </text>
    }
    else
    {
        <text>
            $(`[data-bs-target="#link-${"@Model.TabList.First().Id"}"]`).click();
        </text>
    }
        
</script>
</div>