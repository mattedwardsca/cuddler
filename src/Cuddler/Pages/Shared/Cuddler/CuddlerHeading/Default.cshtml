@using global::Cuddler.Data.Entities
@using global::Cuddler.Forms
@using global::Cuddler.Pages.Shared.Cuddler.CData
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerPopup
@using global::Cuddler.Pages.Shared.Cuddler.FormField
@using global::Cuddler.Pages.Shared.Cuddler.Help
@using global::Cuddler.Pages.Shared.Cuddler.PopupEditor
@using global::Cuddler.Utils
@using global::Cuddler.Web.Helpers
@model CuddlerHeadingTagHelper
@{
    var information = Model.Information?.ToNullableString();
    var html = Model.Html.ToNullableString();
}
<div class="eux-CuddlerHeading">
    <div class="d-grid d-grid-auto-1fr grid-align-center">
        <div class="p-relative">
            @if (!string.IsNullOrEmpty(Model.Tag))
            {
                <h6>
                    @Html.Raw(Model.Tag)
                </h6>
            }
            <div>
                <div class="align-items-center d-flex d-flex-gap-2">
                    <div>
                        <h2>
                            @Html.Raw(Model.Title)
                        </h2>
                    </div>
                    <div>
                        @if (Model.Data != null && Model.UpdateNameApi != null && ReflectionUtil.Implements<IHasName>(Model.Data))
                        {
                            var hasName = (IHasName)Model.Data;

                            <popup-editor button-icon="Edit"
                                          button-text="Rename"
                                          button-type="Icon"
                                          popup-title="Rename"
                                          submit-api-url="@(Model.UpdateNameApi)">
                                <c-data>
                                    <form-field name="@nameof(IHasName.Name)"
                                                template="@(EFormField.Text)"
                                                value="@hasName.Name" />
                                </c-data>
                            </popup-editor>
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(information))
                    {
                        <help>
                            @Html.Raw(information)
                        </help>
                    }
                </div>
            </div>
        </div>
        <div class="align-items-center d-grid-1fr-auto d-grid-gap-20 h-100 p-relative">
            <div></div>
            <div class="d-flex d-flex-gap-1">

                @if (html != null)
                {
                    @Html.Raw(html)
                }

                @if (Model.Data != null)
                {
                    <div class="eux-Header-actionmenu">
                        <div class="dropdown">
                            <button aria-expanded="false"
                                    class="btn btn-light dropdown-toggle"
                                    data-bs-toggle="dropdown"
                                    type="button">
                                Additional Actions
                            </button>
                            <div class="kagVYw"
                                 data-popover-arrow="true"
                                 width="20">
                            </div>
                            <ul class="dropdown-menu dropdown-menu-end">

                                @if (Model.Data != null && (Model.ArchiveUri != null || Model.RestoreUri != null))
                                {
                                    var isArchiveAction = Model.Data.DateArchived == null;
                                    var buttonIcon = isArchiveAction
                                        ? EFontAwesomeIcon.Archive
                                        : EFontAwesomeIcon.ArchiveRestore;
                                    var description = isArchiveAction
                                        ? "Please confirm you want to delete this item."
                                        : "Please confirm you want to restore this item.";

                                    var apiUrl = isArchiveAction
                                        ? Model.ArchiveUri
                                        : Model.RestoreUri;

                                    var submitButtonText = isArchiveAction
                                        ? "Delete"
                                        : "Restore";

                                    var submitButtonType = isArchiveAction
                                        ? EButtonType.Danger
                                        : EButtonType.Warning;

                                    <li class="dropdown-item">
                                        <cuddler-popup action-complete="@EActionComplete.Reload"
                                                       button-icon="@buttonIcon"
                                                       button-text="@submitButtonText"
                                                       button-type="@EButtonType.Link"
                                                       submit-api-url="@apiUrl"
                                                       submit-button-text="@submitButtonText"
                                                       submit-button-type="@submitButtonType">
                                            @description
                                        </cuddler-popup>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>