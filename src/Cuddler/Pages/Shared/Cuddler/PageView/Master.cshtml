@using global::Cuddler.Core.Utils
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerHeading
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerPage
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerPageContent
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerPageContentSection
@using global::Cuddler.Pages.Shared.Cuddler.CuddlerPageHeading
@using global::Cuddler.Pages.Shared.Cuddler.SectionCard
@using global::Cuddler.Web.Modules
@using global::Cuddler.Web.Ui
@model PageViewTagHelper
@inject IModuleService ModuleService
@inject IBoostModule Module
@{
    var viewModel = Model.ViewModel;
    var app = ModuleService.GetSegmentApp();
    var pageTitle = await ModulePageUtil.FormatPageTitle(Html, Module, app);
}
<cuddler-page>
    <cuddler-page-heading has-bottom-border="true">
        <cuddler-heading title="@pageTitle" />
    </cuddler-page-heading>
    <cuddler-page-content>

        @foreach (var row in viewModel.Rows)
        {
            <cuddler-page-content-section page-layout="@row.PageLayout"> 

                @foreach (var col in row.Cols)
                {
                    <section-card>

                        @foreach (var tag in col.Tags)
                        {
                            var validationErrors = ValidateModelUtil.GetModelValidationErrors(tag);
                            if (validationErrors.Any())
                            {
                                foreach (var item in validationErrors)
                                {
                                    @($"Invalid model item: {item.Key} = {item.Value}")
                                }

                                Context.Response.StatusCode = 400;
                                return;
                            }

                            @(await Html.CuddlerUi()
                                        .Template(tag))
                        }

                    </section-card>
                }

            </cuddler-page-content-section>
        }

    </cuddler-page-content>
</cuddler-page>