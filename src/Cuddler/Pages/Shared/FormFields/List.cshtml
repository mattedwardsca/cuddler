@using global::Cuddler.Pages.Shared.Cuddler.FormLabel
@using global::Cuddler.Utils
@model global::Cuddler.Forms.FormField

@{
    var dictionary = Model.HtmlAttributes as Dictionary<string, object?> ?? new Dictionary<string, object?>();
    dictionary.Add("id", Model.WebId);
    var list = Model.BindData?.ToList(); // ?? new List<TextValue>();
}
@if (!Model.HideLabel)
{
    <form-label description="@Model.Description"
                for-property="@Model.WebId"
                required="@Model.Required"
                text="@Model.Label" />
}
<select class="form-control"
        name="@Model.Name"
        style="width: 100%;" @dictionary.ToHtmlAttributes()>
    @if (list != null && list.Count > 0)
    {
        if (!string.IsNullOrEmpty(Model.Placeholder))
        {
            <!option>@Model.Placeholder</!option>
        }

        if (SelectListItemUtil.IsTextValue(list))
        {
            var textValueList = list.Cast<SelectListItem>();
            foreach (var item in textValueList)
            {
                var isChecked = item.Value != null && Model.Value != null && Model.Value.Equals(item.Value, StringComparison.InvariantCultureIgnoreCase);

                <!option value="@item.Value" @isChecked.IsTrue("selected")>@item.Text</!option>
            }
        }
        else
        {
            foreach (var item in list)
            {
                var isChecked = Model.Value != null && Model.Value.Equals(item.ToString(), StringComparison.InvariantCultureIgnoreCase);

                <!option value="@item.ToString()" @isChecked.IsTrue("selected")>@item.ToString()</!option>
            }
        }
    }
</select>