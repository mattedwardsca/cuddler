@using CuddlerDev.Pages.Shared.Cuddler.CuddlerEncode
@using CuddlerDev.Pages.Shared.Cuddler.CuddlerSubmitButton
@using CuddlerDev.Utils
@using CuddlerDev.Web.Helpers

@model CuddlerDev.Pages.Shared.Cuddler.CuddlerPopup.CuddlerPopupTagHelper
@{
    if (string.IsNullOrEmpty(Model.ButtonText) && Model.ButtonIcon == EFontAwesomeIcon.None)
    {
        Model.ButtonIcon = EFontAwesomeIcon.Edit;
    }

    var cssClassBuilder = CssClassBuilder.CreateInstance();

    if (Model.ButtonType == EButtonType.Icon && !string.IsNullOrEmpty(Model.ButtonText))
    {
        cssClassBuilder.AddClass("btn-pill");
    }

    if (string.IsNullOrEmpty(Model.SubmitButtonText))
    {
        Model.SubmitButtonText = Model.ButtonText ?? "Save";
    }

    var guid = string.IsNullOrEmpty(Model.Id)
        ? WebIdUtil.GetWebId()
        : Model.Id;

    var guid3 = WebIdUtil.GetWebId();
    var target = guid + "_target";
    var label = guid + "_label";
    var buttonType = EButtonTypeHelper.ToString(Model.ButtonType);
    var formId = WebIdUtil.GetWebId();
}
<div class="eux-CuddlerPopup @cssClassBuilder">
    <div class="@buttonType @Model.ReadOnly.IsTrue("disabled") @($"eux-icon-{Model.ButtonIcon}")"
         id="@(guid)"
         tabindex="-1"
         @Model.ReadOnly.IsFalse("data-toggle=\"modal\"")
         @Model.ReadOnly.IsFalse($"data-target=\".{target}\"")
         type="button">
        @if (Model.ButtonType != EButtonType.Icon && !string.IsNullOrEmpty(Model.ButtonText))
        {
            if (Model.ButtonIcon == EFontAwesomeIcon.None)
            {
                @Html.Raw(Model.ButtonText)
            }
            else
            {
                <span class="eux-btn-content">
                    <span>
                        <i class="@EFontAwesomeIconHelper.ToString(Model.ButtonIcon)"></i>
                    </span>
                    <span>
                        @Html.Raw(Model.ButtonText)
                    </span>
                </span>
            }
        }
        else
        {
            var icon = $"fa-fw {EFontAwesomeIconHelper.ToString(Model.ButtonIcon)}";

            <span>
                <i class="@icon"></i>
            </span>
        }
    </div>
    <div aria-hidden="true"
         aria-labelledby="@(label)"
         class="fade modal"
         id="@(guid)_popupwindow"
         role="dialog"
         style="background: rgba(0, 0, 0, .8); display: none;"
         tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title"
                        id="@(label)">
                        @if (string.IsNullOrEmpty(Model.PopupTitle))
                        {
                            @Html.Raw(Model.ButtonText)
                        }
                        else
                        {
                            @Html.Raw(Model.PopupTitle)
                        }
                    </h4>
                    <button aria-label="Close"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            data-dismiss="modal"
                            type="button">
                    </button>
                </div>
                <div class="modal-body">
                    <div id="@(target)-pod"></div>
                </div>
            </div>
        </div>
    </div>
    @if (!Model.ReadOnly)
    {
        @if (!Model.SubmitButtonHide)
        {
            if (!string.IsNullOrEmpty(Model.SubmitEvent))
            {
                <script>
                function SubmitForm_@(guid)() {
                    $(document).trigger("@Model.SubmitEvent");
                }
            </script>
            }
            else
            {
                <script>
                function SubmitForm_@(guid)() {
                    return true;
                }
            </script>
            }
            <cuddler-encode id="@guid3">
                <form autocomplete="off"
                      id="@formId"
                      method="POST"
                      onsubmit="return false;">
                    @Html.AntiForgeryToken()
                    <div id="@(target)-pod2"></div>
                    @Html.Raw(Model.Html)
                    <cuddler-submit-button action-complete="@Model.ActionComplete"
                                           filter="@Model.Filter"
                                           form-id="@formId"
                                           read-only="@Model.ReadOnly"
                                           redirect-url="@Model.RedirectUrl"
                                           submit-api-url="@Model.SubmitApiUrl"
                                           submit-button-text="@Model.SubmitButtonText"
                                           submit-button-type="@Model.SubmitButtonType"
                                           submit-event="SubmitForm_@(guid)" />
                </form>
            </cuddler-encode>
        }
        else
        {
            <cuddler-encode id="@guid3">
                @Html.AntiForgeryToken()
                <div id="@(target)-pod2"></div>
                @Html.Raw(Model.Html)
            </cuddler-encode>
        }

        <script>
        $(function() {
            $("#@(guid)").click(function(e) {
                e.preventDefault();
                document.querySelectorAll(".c8d32fc7a").forEach(el => el.remove());
                const popwindow = $("#@(guid)_popupwindow");
                const clonedwindow = popwindow.clone().addClass('c8d32fc7a');
                clonedwindow.appendTo("body");
                clonedwindow.find("#@(target)-pod").html($("<div/>").html($("#@guid3").html()).text());
                clonedwindow.modal('show');
                @if (!string.IsNullOrEmpty(Model.PopupHref))
                {
                    <text>
                        $.get("@(Html.Raw(Model.PopupHref))",
                            function(data) {
                                clonedwindow.find("#@(target)-pod2").html(data);
                            });
                    </text>
                }
                @if (!string.IsNullOrEmpty(Model.CloseEvent))
                {
                    <text>clonedwindow.on('hidden.bs.modal',
                    function() {
                        $(document).trigger("@Model.CloseEvent");
                    });</text>
                }
                @if (!string.IsNullOrEmpty(Model.PopupEvent))
                {
                    <text>
                        return @(Model.PopupEvent)();
                    </text>
                }
                else
                {
                    // ReSharper disable once JsUnreachableCode // Actually, it is reachable. Do this so clicking the button doesn't close panels.
                    <text>return false;</text>
                }
            });
        });
    </script>
    }
</div>