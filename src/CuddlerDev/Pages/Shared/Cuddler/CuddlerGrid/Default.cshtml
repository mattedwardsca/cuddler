@using CuddlerDev.Forms
@using CuddlerDev.Utils
@using CuddlerDev.Web.Helpers
@using CuddlerDev.Web.Kendo
@using Kendo.Mvc
@using Kendo.Mvc.UI
@model CuddlerDev.Pages.Shared.Cuddler.CuddlerGrid.CuddlerGridTagHelper
@{
    var closePopupWindowEvent = WebIdUtil.GetWebId();
    var propertyList = Model.FormFields.GetPropertyList();
    var gridId = Model.GridId ?? WebIdUtil.GetWebId();
    var readApi = Model.Query.ToString();
    //var readApi = Model.Query.ToApiUrl("Query");
    var templateId = WebIdUtil.GetWebId();
    var html = Model.Html.ToNullableString();

    var pageSize = Model.Pageable
        ? TemplateUtil.PageSizes()
                      .First()
        : TemplateUtil.PageSizes()
                      .Last();
}
<div class="eux-CuddlerGrid">
    <script>
    $(function() {
        $(document).on("@closePopupWindowEvent",
            function() {
                const grid = $("#@gridId").data("kendoGrid");
                grid.dataSource.read();
            });
    });
</script>
    <script id="@templateId"
            type="text/x-kendo-template">
   @Html.Raw(Model.Html)
</script>
    @if (Model.RestoreApi != null)
    {
        <script>
        $(function() {
            $("#@gridId").on("click",
                ".customRestore",
                function() {
                    const grid = $("#@gridId").data("kendoGrid");
                    const dataItem = grid.dataItem($(this).closest("tr"));
                    $.post(`@(Model.RestoreApi)?id=${dataItem.Id}`,
                        function() {
                            $(document).trigger("@closePopupWindowEvent");
                        });
                });
        });
    </script>
    }
    @if (Model.DeleteApi != null)
    {
        var deletePopupId = WebIdUtil.GetWebId();
        const string deletePopupTitle = "Delete";
        const string deletePopupMessage = "Are you sure you want to remove this?";
        <script>
        $(function() {

            $("#@(deletePopupId)").on("open",
                function(event, url) {
                    document.querySelectorAll(".c8d32fc7a").forEach(el => el.remove());
                    const popupWindow = $("#@(deletePopupId)");
                    const clonedWindow = popupWindow.clone().addClass('c8d32fc7a');
                    clonedWindow.appendTo("body");
                    clonedWindow.modal('show');
                    clonedWindow.on('hidden.bs.modal', function() { $(document).trigger("@closePopupWindowEvent"); });
                    $(clonedWindow).find(".deleteButton").on("click",
                        function() {
                            $.post(url,
                                function() {
                                    clonedWindow.modal('hide');
                                });
                        });

                });

            $("#@gridId").on("click",
                ".customDelete",
                function() {
                    const grid = $("#@gridId").data("kendoGrid");
                    const dataItem = grid.dataItem($(this).closest("tr"));
                    $("#@deletePopupId").trigger("open", [`@(Model.DeleteApi)?id=${dataItem.Id}`]);
                });
        });
    </script>
        <div aria-hidden="true"
             aria-labelledby="@(deletePopupId)"
             class="eux-modal-background fade modal"
             id="@(deletePopupId)"
             role="dialog"
             style="display: none;"
             tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">
                            @(Html.Raw(deletePopupTitle))
                        </h4>
                        <button aria-label="Close"
                                class="btn-close"
                                data-bs-dismiss="modal"
                                data-dismiss="modal"
                                type="button">
                        </button>
                    </div>
                    <div class="modal-body"
                         id="@(deletePopupId)-pod">
                        <div class="eux-popup-top-html">
                            @Html.Raw(Model.Html)
                        </div>
                        <p>
                            @deletePopupMessage
                        </p>
                        <div style="background: var(--ColorFive); height: 2px; margin: 20px 0;"></div>
                        <div class="d-flex d-flex-gap-2">
                            <span class="btn btn-danger deleteButton w-100px"
                                  type="button">
                                Yes
                            </span>
                            <span class="btn btn-light ms-2 w-100px"
                                  data-bs-dismiss="modal"
                                  data-dismiss="modal"
                                  type="button">
                                Cancel
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @(Html.Kendo()
          .Grid<dynamic>()
          .Name(gridId)
          .Pageable(p => {
              p.Enabled(Model.Pageable);
              p.PageSizes(TemplateUtil.PageSizes());
          })
          .Columns(columns => {
              if (!string.IsNullOrEmpty(Model.DetailsUrl))
              {
                  columns.Bound("Id")
                         .ClientTemplate($"<a href=\"{Model.DetailsUrl}/#:Id#\"><i class=\"fas fa-pen-circle\"></i></a>")
                         .Width(50)
                         .HtmlAttributes(TemplateUtil.TextCenter)
                         .ClientHeaderTemplate(" ");
              }
              foreach (var property in propertyList)
              {
                  var gridBoundColumnBuilder = columns.Bound(property.Name);
                  if (property.GridColumnWidth != null)
                  {
                      gridBoundColumnBuilder.Width((int)property.GridColumnWidth);
                  }

                  if (property.HeaderHtmlAttributes != null)
                  {
                      gridBoundColumnBuilder.HeaderHtmlAttributes(property.HeaderHtmlAttributes);
                  }

                  if (property.HtmlAttributes != null)
                  {
                      var propertyHtmlAttributes = (IDictionary<string, object>)property.HtmlAttributes;

                      gridBoundColumnBuilder.HtmlAttributes(propertyHtmlAttributes);
                  }

                  gridBoundColumnBuilder.ClientHeaderTemplate(property.Label);
                  var propertyGridTemplate = property.GridTemplate;
                  gridBoundColumnBuilder.ClientTemplate(propertyGridTemplate ?? KendoGridExtensions.GetGridTemplate(property.Name, nameof(EGridTemplate.Text)));
              }

              columns.Command(c => {
                  if (Model.DeleteApi != null)
                  {
                      c.Edit()
                       .Template($"<i class=\"pointer customDelete mx-1 {EFontAwesomeIconHelper.ToString(EFontAwesomeIcon.Trash)}\"></i>");
                  }
                  if (Model.RestoreApi != null)
                  {
                      c.Edit()
                       .Template($"<i class=\"pointer customRestore mx-1 {EFontAwesomeIconHelper.ToString(EFontAwesomeIcon.TrashRestore)}\"></i>");
                  }
              })
                     .HtmlAttributes(TemplateUtil.TextCenter)
                     .Width(50);
          })
          .ToolBar(t => {
              if (!string.IsNullOrEmpty(html))
              {
                  t.ClientTemplateId(templateId);
              }
          })
          .DataSource(ds => ds.Ajax()
                              .Model(model => {
                                  model.Id("Id");
                                  model.Field("Id", typeof(string));
                                  foreach (var column in Model.FormFields.GetPropertyList())
                                  {
                                      if (column.Name != "Id")
                                      {
                                          model.Field(column.Name, column.GetDataType());
                                      }
                                  }
                              })
                              .AutoSync(true)
                              .Sort(s => {
                                  if (Model.Query.SortList.Any())
                                  {
                                      foreach (var item in Model.Query.SortList)
                                      {
                                          if (item.SortDirection == ListSortDirection.Ascending)
                                          {
                                              s.Add(item.Member)
                                               .Descending();
                                          }
                                          else
                                          {
                                              s.Add(item.Member)
                                               .Ascending();
                                          }
                                      }
                                  }
                              })
                              .Read(r => r.Url(readApi)
                                          .Type(HttpVerbs.Post))
                              .PageSize(pageSize)))

    @if (Model.HideHeader)
    {
        <style>#@(gridId) .k-grid-header { display: none; }</style>
    }
</div>